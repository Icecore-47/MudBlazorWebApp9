@page "/sshcredentials"
@using MudBlazorWebApp9.Services
@using MudBlazor
@inject SshCredentialService CredentialService
@inject IDialogService DialogService

<h3>Manage SSH Credentials</h3>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="p-4" Elevation="4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddDialog">Add New Credential</MudButton>
    </MudPaper>

    <MudPaper Class="p-4 mt-4" Elevation="4">
        <MudText Typo="Typo.h6">Saved Credentials</MudText>
        <MudDataGrid Items="@credentials" Striped="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <PropertyColumn Property="x => x.Host" Title="Host" />
                <PropertyColumn Property="x => x.Username" Title="Username" />
                <TemplateColumn Title="Actions">
                    <CellTemplate>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenEditDialog(context.Item)">Edit</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteCredential(context.Item)">Delete</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<SshCredential> credentials;

    protected override void OnInitialized()
    {
        credentials = CredentialService.GetAllCredentials();
    }

    private async Task OpenAddDialog()
    {
        var parameters = new DialogParameters { ["Credential"] = new SshCredential() };
        var dialog = DialogService.Show<SshCredentialDialog>("Add/Edit Credential", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            CredentialService.AddCredential(result.Data as SshCredential);
            credentials = CredentialService.GetAllCredentials(); // Refresh the credentials list
        }
    }

    private async Task OpenEditDialog(SshCredential credential)
    {
        var parameters = new DialogParameters { ["Credential"] = credential };
        var dialog = DialogService.Show<SshCredentialDialog>("Edit Credential", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var updatedCredential = result.Data as SshCredential;
            CredentialService.RemoveCredential(credential.Id);
            CredentialService.AddCredential(updatedCredential);
            credentials = CredentialService.GetAllCredentials(); // Refresh the credentials list
        }
    }

    private void DeleteCredential(SshCredential credential)
    {
        CredentialService.RemoveCredential(credential.Id);
        credentials = CredentialService.GetAllCredentials(); // Refresh the credentials list
    }
}
